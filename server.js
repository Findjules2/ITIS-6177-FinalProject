var express = require('express');
const cors = require('cors');
var app = express();
const bodyParser = require('body-parser');
var path = require('path');
require('dotenv').config()

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  swaggerDefinition: {
      info: {
          title: 'AI Image Analysis API',
          version: '1.0.0',
          description: 'AI Image Analysis API autogenerated by '
      },
      host: 'localhost:3000',
      basePath: '/',
  },
  apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

app.use(bodyParser.json())
app.use(express.urlencoded({
    extended: true
}))

const ComputerVisionClient = require('@azure/cognitiveservices-computervision').ComputerVisionClient;
    const ApiKeyCredentials = require('@azure/ms-rest-js').ApiKeyCredentials;
    
    const key = process.env.APIKEY;
    const endpoint = process.env.AZUREENDPOINT;
    
    const computerVisionClient = new ComputerVisionClient(
      new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint
    );

    

app.get('/', function(req, res) {
    res.sendFile(path.join(__dirname + '/index.html'));
});

/**
 * @swagger
 * /caption:
 *    post:
 *      description: Shows caption of image
 *      produces:
 *          - application/json
 *      parameters:
 *          - in: body
 *            name: body
 *            description: json body with imageURL key and value of url location as a string
 *            required: true
 *            schema:
 *              type: object
 *              properties:
 *                imageURL:
 *                  type: string       
 *      responses:
 *          200:
 *              description: A status message caption generated
 *          400:
 *              description: Status message states error of url not found.
 */

app.post('/caption', async (req, res) => {
    const { imageURL } = req.body;
  
    console.log('Analyzing URL image to caption...', imageURL);
  
    try {
      const imageAnalysis = await computerVisionClient.describeImage(imageURL);
  
      res.json({ caption: imageAnalysis.captions[0].text });
    } catch (error) {
      console.error('Error analyzing image:', error);
      res.status(400).json({ error: 'An error occurred while analyzing the image' });
    }
  });

/**
 * @swagger
 * /tag:
 *    post:
 *      description: Shows caption of image
 *      produces:
 *          - application/json
 *      parameters:
 *          - in: body
 *            name: body
 *            description: json body for caption data
 *            required: true
 *            schema:
 *              type: object
 *              properties:
 *                imageURL:
 *                  type: string       
 *      responses:
 *          200:
 *              description: A status message caption generated
 *          400:
 *              description: Status message states error of url not found.
 */
// Assuming computerVisionClient is properly defined elsewhere in your code

app.post('/tag', (req, res) => {
    const describeURL = req.body.imageURL;
    console.log('Analyzing URL image to tag...', describeURL);

    // Assuming computerVisionClient.describeImage returns a Promise
    const tag = computerVisionClient.describeImage(describeURL);

    tag.then((result) => {
        console.log(result);

        // Extracting the first 6 tags (index 0 to 5) from the tags array
        const firstSixTags = result.tags.slice(0, 160); 
        const sixTags = firstSixTags.join(", ");

        res.json({ tag: sixTags });
    }).catch(err => {
        console.log(err);
        res.status(500).json({ error: 'Image analysis failed' });
    });
});

  
  


/**
 * @swagger
 * /confidence:
 *    post:
 *      description: Shows confidence level of image analysis
 *      produces:
 *          - application/json
 *      parameters:
 *          - in: body
 *            name: body
 *            description: json body with imageURL key and value of url location as a string
 *            required: true
 *            schema:
 *              type: object
 *              properties:
 *                imageURL:
 *                  type: string       
 *      responses:
 *          200:
 *              description: A status message of confidence percentage generated
 *          400:
 *              description: Status message states error of url not found.
 */

app.post('/confidence', (req, res) => {

    const describeURL = req.body.imageURL
    console.log('Analyzing confidence percentage...', describeURL);
    console.log(req);
    
    const confidence = new Promise((resolve) => {
        resolve(computerVisionClient.describeImage(describeURL))
    })
    confidence.then((elm) => {
        console.log(elm);
        res.json({ confidence: elm.captions[0].confidence })
        
    }).catch(err => console.log(err));
    
})

app.use(express.static('public'))

app.listen(3000);